#!/usr/bin/env bash
# Copyright 2021 by SDRausty. All rights reserved, see LICENSE üåé üåç üåè
# Hosting sdrausty.github.io/TermuxArch courtesy https://pages.github.com.
# https://sdrausty.github.io/TermuxArch/README has info about this project.
# https://sdrausty.github.io/TermuxArch/CONTRIBUTORS Thank you for your help.
### Take pictures from device cameras and create a timelapse moving sequence of images.  All seven arguments are listed here, including their default values;  If run without any arguments, the default values will be used to create a timelapse moving sequence of images:
##############################################################################

set -Eeuo pipefail
shopt -s nullglob globstar
unset LD_PRELOAD
VERSIONID=2.0.1355

_TRPERR_() {  # run on script error
	local RV="$?"
	printf "\\e[?25h\\n\\e[1;48;5;138m %s\\e[0m\\n\\n" "TermuxArch WARNING:  Generated script signal ${RV:-UNKNOWN} near or at line number ${1:-UNKNOWN} by '${2:-UNKNOWNCOMMAND}'!"
	exit 201
}


_TRPET_() {  # run on exit
	local RV="$?"
	printf ""
	if [[ "$RV" = 0 ]]
	then
		printf "\\e[0;32m%s\\e[1;34m: \\e[1;32m%s\\e[0m\\n\\e[0m" "${0##*/} $ARGS $VERSIONID" "DONE üèÅ "
		printf "\\e]2; %s: %s \007" "${0##*/} $ARGS" "DONE üèÅ "
	else
		printf "\\e[0;32m%s \\e[0m%s\\e[1;34m: \\e[1;32m%s\\e[0m\\n\\e[0m" "${0##*/} $ARGS $VERSIONID" "[Exit Signal $RV]" "DONE  üèÅ "
		printf "\033]2; %s: %s %s \007" "${0##*/} $ARGS" "[Exit Signal $RV]" "DONE üèÅ "
	fi
	printf "\e[?25h\e[0m"
	set +Eeuo pipefail
	exit
}

_TRPSIG_() {  # run on signal
	printf "\\e[?25h\\e[1;7;38;5;0mTermuxArch WARNING:  Signal %s received!\\e[0m\\n" "$?"
	exit 211
}

_TRPQ_() {  # run on quit
	printf "\\e[?25h\\e[1;7;38;5;0mTermuxArch WARNING:  Quit signal %s received!\\e[0m\\n" "$?"
	exit 221
}
ARGS="$@"
trap '_TRPERR_ $LINENO $BASH_COMMAND $?' ERR
trap _TRPET_ EXIT
trap _TRPSIG_ HUP INT TERM
trap _TRPQ_ QUIT

# show help
[[ -n "${1:-}" ]] && { [[ "${1//-}" = [\/]* ]] || [[ "${1//-}" = [?]* ]] || [[ "${1//-}" = [Hh]* ]] ; } && { printf '\e[1;32m%s\n' "Help for '${0##*/}':" && TSFILE="($(grep '##\ ' "$0"))" && printf '\e[0;32m%s\e[1;32m\n%s\n' "$(for HL in "${TSFILE[@]}" ; do cut -d\) -f1 <<< "${HL//###/	}" | cut -f 2 ; done )" "Help for '${0##*/}': DONE" ; exit ; }
# use pocket mode
[[ -n "${1:-}" ]] && { [[ "${1//-}" = [Pp]* ]] && POCKET=0 && CAMID=2 && printf '\e[0;34m%s\n' "IM pocket mode enabled." || CAMID=${1:-2} ; }
_DEFCAM_ () { # set default camera id
for CAMID in $(termux-camera-info | grep -w "id" | cut -d"\"" -f 4)
do
if [ "$CAMID" == 2 ]
then
CAMID=2
break
fi
done
}
[[ -z "${1:-}" ]] && _DEFCAM_ ### [1] defaults are camid 2 if available, or camid 1:  Please choose one camera 0 1 2 3 4 5 6 7 id,
FRAMECTOT=${2:-11} ### [2] default 11:  Total frame count + 1,
FRAMERATE=${3:-2} ### [3] default 2:  Video 0.5 1 2 4 8 16 32 frames per second rendered in the mpg file,
THRESHOLDSET=${4:-256} ### [4] default 256:  Byte difference 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 between last two picture frames taken;  Can be used for motion detection.  The greater the number, the lesser the sensitivity.  Camera resolution also affects this argument,
_CAMS_ () {
while [ "$FRAMECOUNT" -le "$FRAMECTOT" ]
do
{ [[ "${POCKET:-}" == 0 ]] && _CAMSSENSORS_ "$@" ; } || _CAMSCORE_ "$@"
done
}
_CAMSSENSORS_ () {
ITSENSOR="$(termux-sensor -n 1 -s "IN_POCKET" | grep 1|| printf 0)"
PYSENSOR="$(termux-sensor -n 1 -s "PROXIMITY" | grep 1|| printf 0)"
if [ "${ITSENSOR//,}" -eq 1 ] || [ "$PYSENSOR" -eq 1 ]
then
_CAMSCORE_ "$@"
else
printf '\e[0;36m%s\e[0m\n' "IM sensors wait; sleeping."
sleep 4
fi
}
_CAMSCORE_ () {
FRAMENAME="camid$(printf '%s.%04d.jpg' "$CAMID" "$FRAMECOUNT")"
printf '\e[0;32m%s\e[1;32m%s\e[0;32m%s\e[1;32m%s\e[0;32m%s\n\e[0;32m%s' "IT " "$((FRAMECOUNT + 1))/$((FRAMECTOT + 1))" " frame count: " "${THRESHOLDSET:-}" " threshold set" "IP camid $CAMID taking picture $FRAMENAME: "
touch "$PWD/$FRAMENAME"

[ -z "${5:-}" ] || { [[ "${5//-}" = [Rr]* ]] && OTSENSOR="$(termux-sensor -n 1 -s "orient" | grep -e 0 -e 1 -e2 -e 3 || printf error)"; } || sleep 0.42 # Adjust for device being used; This sleep may be unnecessary.
"${PREFIX:-/data/data/com.termux/files/usr}"/libexec/termux-api CameraPhoto --es camera "$CAMID" --es file "$PWD/$FRAMENAME"
printf '\e[0;32m%s\n' "DONE"
_ISZERO_ "$@"
}
_CHECKMOTIONDIFF_() {
if [ "$FRAMECOUNT" -ne 0 ]
then
THRESHOLD="$((LASTZERO - ISZERO))"
THRESHOLD="${THRESHOLD//-}"
if [ "$THRESHOLD" -le "$THRESHOLDSET" ]
then
printf '\e[0;2m%s\n' "ID $THRESHOLD/$THRESHOLDSET threshold: deleting file $FRAMENAME"
rm -f "$FRAMENAME"
OLDISZERO="$ISZERO"
fi
fi
}
_ISZERO_ () {
if [ -n "${ISZERO:-}" ]
then
LASTZERO="$ISZERO"
fi
ISZERO="$(find . -type f -name "$FRAMENAME" -printf "%s")"
printf '\e[0;36m%s\e[1;36m%s\n' "IS framename $FRAMENAME size: " "$ISZERO"
if [ "$ISZERO" -eq 0 ]
then
ISZERO="${OLDISZERO:-}"
printf '\e[0;33m%s' "E0 deleting zero size file $FRAMENAME: "
rm -f "$FRAMENAME"
printf '\e[0;32m%s\n' "DONE"
E0VAR=1
fi
if [[ ${E0VAR:-} == 0 ]]
then
_CHECKMOTIONDIFF_
_MAGICKCK_ "$@"
else
E0VAR=0
fi
}
_MAKEDIRS_ () {
CAMD="camid$CAMID"
[ -e "output/$CAMD/$CAMD$TIMESTAMP" ] || { printf '\e[0;36m%s' "IM mkdir -p output/$CAMD/$CAMD$TIMESTAMP: " && mkdir -p output/"$CAMD/$CAMD$TIMESTAMP" && printf '\e[0;32m%s\n' "DONE"; }
[ -e output/"$CAMD"/gifs ] || { printf '\e[0;36m%s' "IM mkdir -p output/$CAMD/gifs: " && mkdir -p output/"$CAMD"/gifs && printf '\e[0;32m%s\n' "DONE"; }
[ -e output/"$CAMD"/mp4s ] || { printf '\e[0;36m%s' "IM mkdir -p output/$CAMD/mp4s: " && mkdir -p output/"$CAMD/mp4s" && printf '\e[0;32m%s\n' "DONE"; }
printf '\e[0;36m%s' "IM cd output/$CAMD/$CAMD$TIMESTAMP: " && cd output/"$CAMD/$CAMD$TIMESTAMP" && printf '\e[0;32m%s\n' "DONE"
}
_MAGICKCK_ () {
if [ -e "$FRAMENAME" ]
then
printf '\e[0;36m%s' "IC checking file $FRAMENAME for errors: "
MAGICKCK="$(nice -n 20 magick identify "$FRAMENAME" 2>&1 || printf error)"
if grep -i error <<< "$MAGICKCK"
then
printf '\e[0;31m%s\e[0m\n' "ERROR"
rm -f "$FRAMENAME"
printf '\e[0;31m%s\n\e[0;36m%s\n' "ED deleted file $FRAMENAME: ERROR" "IR redoing file $FRAMENAME..."
else
printf '\e[0;32m%s\n' "DONE"
FRAMECOUNT="$((FRAMECOUNT + 1))"
printf '\e[0;32m%s\e[1;32m%s\e[0;32m%s\n' "IF " "file $FRAMENAME added" " to que."
### [5] default no rotation:  R|r[otate]: useful for using device orientation.  You can use R or r as the fifth argument to activate picture rotation which is preset to 0¬∞, 90¬∞, 180¬∞ and 270¬∞ rotation.  The sixth argument can be used to enter a desired rotation angle instead of the preset rotation,
### [6] default none:  Enter desired picture rotation angle in digits to use a set rotation angle,
if [ -n "${5:-}" ]
then
if [[ "${5//-}" = [Rr]* ]]
then
if [ "$OTSENSOR" -eq 0 ] || [ "$OTSENSOR" -eq -1 ]
then
printf '\e[0;36m%s' "IR rotating file $FRAMENAME by ${6:-90}¬∞: "
nice -n 20 magick "$FRAMENAME" -rotate "${6:-90}" "$FRAMENAME".jpg
mv "$FRAMENAME".jpg "$FRAMENAME"
printf '\e[0;32m%s\n' "DONE"
elif [ "$OTSENSOR" -eq 2 ]
then
printf '\e[0;36m%s' "IR rotating file $FRAMENAME by ${6:-180}¬∞: "
nice -n 20 magick "$FRAMENAME" -rotate "${6:-180}" "$FRAMENAME".jpg
mv "$FRAMENAME".jpg "$FRAMENAME"
printf '\e[0;32m%s\n' "DONE"
elif [ "$OTSENSOR" -eq 3 ]
then
printf '\e[0;36m%s' "IR rotating file $FRAMENAME by ${6:-270}¬∞: "
nice -n 20 magick "$FRAMENAME" -rotate "${6:-270}" "$FRAMENAME".jpg
mv "$FRAMENAME".jpg "$FRAMENAME"
printf '\e[0;32m%s\n' "DONE"
fi
fi
fi
fi
fi
}
_MECONVERT_ () {
# ffmpeg -i "$CAMD."%04d.jpg camid"$CAMD.$TIMESTAMP".gif
printf '\e[0;36m%s\e[0m\n' "IM making $CAMID.$TIMESTAMP.gif: This job will complete in the background..." && nice -n 20 convert -delay "$((FRAMERATE * 100))" -loop 0 "$CAMD."*.jpg "$CAMD.$TIMESTAMP".gif && { ls -al "$CAMD.$TIMESTAMP".gif && printf '\e[0;32m%s\e[0m\n' "IM making $CAMID.$TIMESTAMP.gif: DONE" ; } || printf '\e[1;31m%s\e[0m\n' "EM creating $CAMID.$TIMESTAMP.gif: ERROR"
printf '\e[0;36m%s' "IM mv $CAMID.$TIMESTAMP.gif ../gifs/: " && mv "$CAMD.$TIMESTAMP".gif ../gifs/ && printf '\e[0;32m%s\e[0m\n' "DONE"
}
_MEFFMPEG_ () {
#ffmpeg -i "$CAMD."%04d.jpg -c:v libx264 -preset veryslow -crf 0 output.mkv
# To start at frame 20 and finish at frame 420: ffmpeg -start_number 20 -i filename%04d.jpg -vframes 400 video.webm
printf '\e[0;36m%s\e[0m\n' "IM making $CAMID.$TIMESTAMP.mp4: This job will complete in the background..." && nice -n 20 ffmpeg -framerate "$FRAMERATE" -i "$CAMD."%04d.jpg  -c:v libx264 -preset veryslow -crf 0 -g 1 "$CAMD.$TIMESTAMP".mp4 && { ls -al "$CAMD.$TIMESTAMP".mp4 && printf '\e[0;32m%s\e[0m\n' "IM making $CAMID.$TIMESTAMP.mp4: DONE" ; } || printf '\e[1;31m%s\e[0m\n' "EM creating $CAMID.$TIMESTAMP.mp4: ERROR"
printf '\e[0;36m%s' "IM mv $CAMID.$TIMESTAMP.mp4 ../mp4s/: " && mv "$CAMD.$TIMESTAMP".mp4 ../mp4s/ && printf '\e[0;32m%s\e[0m\n' "DONE"
}
printf '\e[0;34m%s\e[1;36m%s\e[0;34m%s' "Starting command " "termux-wake-lock" ": "
am startservice --user 0 -a com.termux.service_wake_lock com.termux/com.termux.app.TermuxService 1>/dev/null && printf '\e[0;32m%s\n\e[0;34m%s\e[1;36m%s\e[0;34m%s\n' "DONE" "Command " "termux-wake-unlock" " stops the wake lock." || printf '\e[0;33m%s\e[0m\n' "UTP am startservice: Continuing..."
# Please run 'pkg install ffmpeg imagemagick termux-api' before running this script.  Also ensure that Termux-api is installed, which is available at this https://github.com/termux/termux-api/actions/workflows/debug_build.yml webpage.
{ command -v magick 1>/dev/null && command -v ffmpeg 1>/dev/null && ls "${PREFIX:-/data/data/com.termux/files/usr}"/libexec/termux-api >/dev/null 2>&1 ; } || { command -v pkg 1>/dev/null && printf '\e[0;34m%s\e[0m' "IM running 'pkg install ffmpeg imagemagick termux-api': " && pkg install ffmpeg imagemagick termux-api ; } || { printf '\e[0;31m%s\n' "E Please run 'pkg install ffmpeg imagemagick termux-api' before running '${0##*/} $ARGS'." && exit 1 ; }
# VLC media player APK can be downloaded from these https://www.videolan.org/vlc/download-android.html and https://get.videolan.org/vlc-android/3.3.4/ webpages.
E0VAR=0
FRAMECOUNT=0
TIMESTAMP="$(date +%Y%m%d%H%M%S)"
_MAKEDIRS_ "${1:-2}"
_CAMS_ "$@"
_MECONVERT_ &
_MEFFMPEG_ &
PSAUX="($(ps aux))"
PSAUX="$(grep -e convert -e ffmpeg <<< "${PSAUX[@]}" | cut -d":" -f 2-9999 | cut -d " " -f 2-9999 ||:)"
printf '\e[0;34m%s\e[1;36m%s\n\e[1;32m%s\n' "IM " "running these background jobs:" "${PSAUX[@]}"
printf '\e[0;34m%s\e[1;36m%s\e[0;34m%s\n' "IM " "ps aux" " shows processes running."
printf '\e[0;34m%s\e[1;36m%s\e[0;34m%s\e[0m\n' "The command " "termux-wake-unlock" " stops the wake lock."
sleep "${7:-2}" ### [7] default of two seconds:  Time before exit;  Programs 'convert' and 'ffmpeg' will continue to run in the background until they are done.
### More options in addition to image checking and rotation can be added by editing this file by using the magick command;  The command line options for magick are listed at this https://imagemagick.org/script/command-line-options.php webpage.
### Loop example: 'while : ; do cams 2 11 2 256 r 90 2 ; done'
### Semantics: 'cams camid totalframes+1 framespersecond threshold rotate degrees exitwait'
### Usage: 'cams 2 11 2 256 r 90 2'
# cams EOF
